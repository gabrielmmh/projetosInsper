library ieee;
use ieee.std_logic_1164.all;

entity Aula8 is
  -- Total de bits das entradas e saidas
  generic (
		  larguraDados : natural := 8;
		  larguraRAM : natural := 6;
		  larguraAddr: natural := 9;
		  larguraInst : natural := 13
        --simulacao : boolean := TRUE-- para gravar na placa, altere de TRUE para FALSE
  );
  port   (
    CLOCK_50 : in std_logic;
	 
	 PC_OUT  : out std_logic_vector(larguraAddr-1 downto 0);
	 
	 LEDR : out std_logic_vector(9 downto 0);
	 
	 HEX0: out std_logic_vector(6 downto 0);
    HEX1: out std_logic_vector(6 downto 0);
    HEX2: out std_logic_vector(6 downto 0);
    HEX3: out std_logic_vector(6 downto 0);
    HEX4: out std_logic_vector(6 downto 0);
    HEX5: out std_logic_vector(6 downto 0);
	 
--  DEBUGS OUTPUTS
	 DA_out: out std_logic_vector(larguraAddr-1 downto 0);
	 DIN_out: out std_logic_vector (larguraDados-1 downto 0);
	 DOUT_out: out std_logic_vector (larguraDados-1 downto 0);
	 BLOCO_out: out std_logic_vector(larguraDados-1 downto 0);
	 RDD: out std_logic;
	 WRR: out std_logic;
	 Opcode_OUT: out std_logic_vector(3 downto 0);
	 Instruction_OUT : out std_logic_vector(12 downto 0);
	 ULA_OUT: out std_logic_vector(7 downto 0); 
	 ULAOP_OUT: out std_logic_vector(1 downto 0);
	 CS: out std_logic_vector(11 downto 0);
	 
	 SW  : in std_logic_vector(9 downto 0);
	 
	 KEY : in std_logic_vector(3 downto 0);
    FPGA_RESET_N : in std_logic
  );
end entity;

architecture arquitetura of Aula8 is

  signal CLK         : std_logic;
  signal Wr          : std_logic;
  signal Rd          : std_logic;
  
  signal KEY_0_TRT1  : std_logic;
  signal KEY_0_TRT2  : std_logic;
  signal KEY_1_TRT1  : std_logic;
  signal KEY_1_TRT2  : std_logic;
  signal KEY_2_TRT1  : std_logic;
  signal KEY_2_TRT2  : std_logic;
  signal KEY_3_TRT1  : std_logic;
  signal KEY_3_TRT2  : std_logic;
  signal RST_TRT1    : std_logic;
  signal RST_TRT2    : std_logic;
  
  signal limpaLeitura: std_logic;
  
  signal ROM_Address : std_logic_vector(larguraAddr-1 downto 0);
  signal dataAddress : std_logic_vector(larguraAddr-1 downto 0);
  
  signal instruction : std_logic_vector(larguraInst-1 downto 0);
  
  signal leituraDados: std_logic_vector(larguraDados-1 downto 0);
  signal REGA_OUT    : std_logic_vector(larguraDados-1 downto 0);
  signal Bloco       : std_logic_vector(larguraDados-1 downto 0);
  signal enderecoDec : std_logic_vector(larguraDados-1 downto 0);

begin

  CLK <= CLOCK_50;

--	--TESTEEEEE
--	divisor : entity work.divisorGenerico
--            generic map (divisor => 12500000)   -- divide por 10.
--            port map (clk => CLOCK_50, saida_clk => CLK);
--	----------

	CPU : entity work.CPU generic map(larguraDados => larguraDados, larguraAddr => larguraAddr)
				 port map (
				 CLOCK => CLK, 
				 RST => NOT FPGA_RESET_N, 
				 Rd => Rd, 
				 Wr => Wr, 
				 ROM_Address => ROM_Address, 
				 Instruction_IN => instruction,
				 Data_IN => leituraDados, 
				 Data_OUT => REGA_OUT, 
				 Data_Address => dataAddress,
				 ULA_OUT => ULA_OUT,
				 ULAOP_OUT => ULAOP_OUT,
				 CS => CS
				 );

	ROM : entity work.memoriaROM generic map (dataWidth => larguraInst, addrWidth => larguraAddr)
				 port map (
				 Endereco => ROM_Address, 
				 Dado => instruction
				 );			  
				 
	RAM : entity work.memoriaRAM  generic map (dataWidth => larguraDados, addrWidth => larguraRAM)
				 port map (
				 addr => dataAddress(5 downto 0), 
				 we => Wr, 
				 re => Rd,
				 habilita => Bloco(0), 
				 dado_in => REGA_OUT, 
				 dado_out => leituraDados, 
				 clk => CLK
				 );
	
	DecBloc : entity work.decoder3x8
				 port map (
				 entrada => dataAddress(8 downto 6), 
				 saida => Bloco
				 );
				 
	DecAddr : entity work.decoder3x8
				 port map (
				 entrada => dataAddress(2 downto 0), 
				 saida => enderecoDec
				 );

--	LEDS
				 
	LEDs: entity work.leds
		 port map (
			  clk => clk, 
			  escrita => Wr, 
			  dadosEntrada => REGA_OUT, 
			  Bloco => Bloco(4), 
			  A5 => dataAddress(5),
			  endereco => enderecoDec(2 downto 0),
			  ledsV => LEDR(7 downto 0), 
			  led1 => LEDR(8), 
			  led2 => LEDR(9)
		 );
		 
--	DISPLAYS
		 
	DISPLAYs: entity work.displays
		  port map (
			  clk => clk, 
			  escrita => Wr, 
			  dadosEntrada => REGA_OUT(3 downto 0), 
			  Bloco => Bloco(4), 
			  A5 => dataAddress(5),
			  endereco => enderecoDec(5 downto 0),
			  disp0 => HEX0,
			  disp1 => HEX1,
			  disp2 => HEX2,
			  disp3 => HEX3,
			  disp4 => HEX4,
			  disp5 => HEX5
		);
		
--	SWITCHES
	 
	bufferSW: entity work.buffer_8portas
	  port map (
		  entrada => SW(7 downto 0),
		  habilita => Rd AND enderecoDec(0) AND Bloco(5) AND (NOT dataAddress(5)),
		  saida => leituraDados 
	  );
  
	bufferSW8: entity work.buffer_1porta
		port map (
		  entrada => SW(8),
		  habilita => Rd AND enderecoDec(1) AND Bloco(5) AND (NOT dataAddress(5)),
		  saida => leituraDados(0) 
		);
  
	bufferSW9: entity work.buffer_1porta
		port map (
			 entrada => SW(9),
			 habilita => Rd AND enderecoDec(2) AND Bloco(5) AND (NOT dataAddress(5)),
			 saida => leituraDados(0) 
		);

--	KEY 0

   detector_Borda_Key0: work.edgeDetector(bordaSubida)
     port map (
		  clk => CLOCK_50, 
		  entrada => NOT KEY(0), 
		  saida => KEY_0_TRT1
		  );
	
	FF_Key0: entity work.FlipFlop
     port map (
        DIN => '1', 
        DOUT => KEY_0_TRT2, 
        ENABLE => '1', 
        CLK => KEY_0_TRT1,
		  RST => limpaLeitura
     );

   buffer_Key0: entity work.buffer_1porta
	  port map (
		  entrada => KEY_0_TRT2,
		  habilita => Rd AND enderecoDec(0) AND Bloco(5) AND dataAddress(5),
		  saida => leituraDados(0)
	  );
	  
--	KEY 1

   detector_Borda_Key1: work.edgeDetector(bordaSubida)
     port map (
		  clk => CLOCK_50, 
		  entrada => NOT KEY(1), 
		  saida => KEY_1_TRT1
		  );
	
	FF_Key1: entity work.FlipFlop
     port map (
        DIN => '1', 
        DOUT => KEY_1_TRT2, 
        ENABLE => '1', 
        CLK => KEY_1_TRT1,
		  RST => limpaLeitura
     );
	  
	buffer_Key1: entity work.buffer_1porta
	  port map (
		  entrada => KEY_1_TRT2,
		  habilita => Rd AND enderecoDec(1) AND Bloco(5) AND dataAddress(5),
		  saida => leituraDados(0) 
	  );
	  
--	KEY 2

   detector_Borda_Key2: work.edgeDetector(bordaSubida)
     port map (
		  clk => CLOCK_50, 
		  entrada => NOT KEY(2), 
		  saida => KEY_2_TRT1
		  );
	
	FF_Key2: entity work.FlipFlop
     port map (
        DIN => '1', 
        DOUT => KEY_2_TRT2, 
        ENABLE => '1', 
        CLK => KEY_2_TRT1,
		  RST => limpaLeitura
     );
	  
	buffer_Key2: entity work.buffer_1porta
	  port map (
		  entrada => KEY_2_TRT2,
		  habilita => Rd AND enderecoDec(2) AND Bloco(5) AND dataAddress(5),
		  saida => leituraDados(0) 
	  );
	  
--	KEY 3

   detector_Borda_Key3: work.edgeDetector(bordaSubida)
     port map (
		  clk => CLOCK_50, 
		  entrada => NOT KEY(3), 
		  saida => KEY_3_TRT1
		  );
	
	FF_Key3: entity work.FlipFlop
     port map (
        DIN => '1', 
        DOUT => KEY_3_TRT2, 
        ENABLE => '1', 
        CLK => KEY_3_TRT1,
		  RST => limpaLeitura
     );
	  
   buffer_Key3: entity work.buffer_1porta
	  port map (
		  entrada => KEY_3_TRT2,
		  habilita => Rd AND enderecoDec(3) AND Bloco(5) AND dataAddress(5),
		  saida => leituraDados(0) 
	  );
	  
--	RESET

   detector_Borda_Rst: work.edgeDetector(bordaSubida)
     port map (
		  clk => CLOCK_50, 
		  entrada => NOT FPGA_RESET_N, 
		  saida => RST_TRT1
		  );
	
	FF_Rst: entity work.FlipFlop
     port map (
        DIN => '1', 
        DOUT => RST_TRT2, 
        ENABLE => '1', 
        CLK => RST_TRT1,
		  RST => limpaLeitura
     );

   buffer_Reset: entity work.buffer_1porta
	  port map (
		  entrada => RST_TRT2,
		  habilita => Rd AND enderecoDec(4) AND Bloco(5) AND dataAddress(5),
		  saida => leituraDados(0) 
	  );	  
	
	PC_OUT <= ROM_Address;
	
	limpaLeitura <= dataAddress(8) AND dataAddress(7) AND dataAddress(6) AND dataAddress(5) AND dataAddress(4) AND 
						 dataAddress(3) AND dataAddress(2) AND dataAddress(1) AND dataAddress(0) AND Wr;
	
	DA_out <= dataAddress;
	DIN_out <= leituraDados;
	DOUT_out <= REGA_OUT;
	BLOCO_out <= Bloco;
	RDD <= Rd;
	WRR <= Wr;
	Opcode_OUT <= instruction(12 downto 9);
	Instruction_OUT <= instruction(12 downto 0);

end architecture;