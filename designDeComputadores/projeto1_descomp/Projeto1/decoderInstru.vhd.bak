library ieee;
use ieee.std_logic_1164.all;

entity decoderInstru is
  port ( opcode : in std_logic_vector(3 downto 0);
         saida : out std_logic_vector(11 downto 0)
  );
end entity;

architecture comportamento of decoderInstru is

  alias RAM_WriteEnable : std_logic is saida(0);
  alias RAM_ReadEnable : std_logic is saida(1);
  
  alias FlagZ : std_logic is saida(2);
  alias ULA_Operation : std_logic_vector(1 downto 0) is saida(4 downto 3);
  alias REGA_Enable : std_logic is saida(5);
  alias MUX1_Select : std_logic is saida(6);
  
  alias JEQ_B : std_logic is saida(7);
  alias JSR_B : std_logic is saida(8);
  alias RET_B : std_logic is saida(9);
  alias JMP_B : std_logic is saida(10);
  alias Hab_Esc_Ret : std_logic is saida(11);
  
  constant NOP  : std_logic_vector(3 downto 0) := "0000";
  constant LDA  : std_logic_vector(3 downto 0) := "0001";
  constant SOMA : std_logic_vector(3 downto 0) := "0010";
  constant SUB  : std_logic_vector(3 downto 0) := "0011";
  constant LDI  : std_logic_vector(3 downto 0) := "0100";
  constant STA  : std_logic_vector(3 downto 0) := "0101";
  constant JMP  : std_logic_vector(3 downto 0) := "0110";
  constant JEQ  : std_logic_vector(3 downto 0) := "0111";
  constant CEQ  : std_logic_vector(3 downto 0) := "1000";
  constant JSR  : std_logic_vector(3 downto 0) := "1001";
  constant RET  : std_logic_vector(3 downto 0) := "1010";
  constant ANDI : std_logic_vector(3 downto 0) := "1011"; -- ANDI = AND INSTRUCTION (AND Ã© palavra reservada)

  begin
  
  RAM_WriteEnable <= '1'  when (opcode = STA) else '0';
  RAM_ReadEnable  <= '1'  when (opcode = LDA OR opcode = SOMA OR opcode = SUB OR 
										  opcode = CEQ OR opcode = ANDI) else '0';
  FlagZ           <= '1'  when (opcode = CEQ) else '0';
  ULA_Operation   <= "00" when (opcode = SUB OR opcode = CEQ) else 
							"01" when (opcode = SOMA) else
							"10" when (opcode = ANDI) else
							"11";
  REGA_ENABLE     <= '1'  when (opcode = LDA OR opcode = SOMA OR opcode = SUB OR 
										  opcode = LDI OR opcode = ANDI) else '0';
  MUX1_SELECT     <= '1'  when (opcode = LDI) else '0';
  JEQ_B           <= '1'  when (opcode = JEQ) else '0';
  JSR_B           <= '1'  when (opcode = JSR) else '0';
  RET_B           <= '1'  when (opcode = RET) else '0';
  JMP_B           <= '1'  when (opcode = JMP) else '0';
  Hab_Esc_Ret     <= '1'  when (opcode = JSR) else '0';
  
end architecture;